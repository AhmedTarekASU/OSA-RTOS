
OSA-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000047  00800060  00800060  000006c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001317  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000878  00000000  00000000  00001b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8b  00000000  00000000  000023df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  0000306c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000711  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000526  00000000  00000000  00003a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 3a       	cpi	r26, 0xA7	; 167
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  74:	0c 94 25 03 	jmp	0x64a	; 0x64a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Task1>:
{
	OS_Timer();
}

void Task1(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x55;
  88:	85 e5       	ldi	r24, 0x55	; 85
  8a:	8b bb       	out	0x1b, r24	; 27
	while(1)
	{
		PORTA = ~PORTA;
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	80 95       	com	r24
  90:	8b bb       	out	0x1b, r24	; 27
		OS_Delay(20);
  92:	84 e1       	ldi	r24, 0x14	; 20
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 2f 02 	call	0x45e	; 0x45e <_OS_InitDelay>
  9a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_OS_ReturnSave>
  9e:	f6 cf       	rjmp	.-20     	; 0x8c <Task1+0x10>

000000a0 <Task2>:
	}
}

void Task2(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00;
  a8:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	88 bb       	out	0x18, r24	; 24
	while(1)
	{
		var = PINB;
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		OS_Yield();
  b4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_OS_ReturnSave>
  b8:	fa cf       	rjmp	.-12     	; 0xae <Task2+0xe>

000000ba <Task3>:
	}
}

void Task3(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  c6:	15 ba       	out	0x15, r1	; 21
	while(1)
	{
		PORTC = var;
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  cc:	85 bb       	out	0x15, r24	; 21
		OS_Yield();
  ce:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_OS_ReturnSave>
  d2:	fa cf       	rjmp	.-12     	; 0xc8 <Task3+0xe>

000000d4 <Task_Init>:
	}
}

void Task_Init(void)
{
	OS_Task_Create(0,Task1);
  d4:	6e e3       	ldi	r22, 0x3E	; 62
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_OS_Task_Create>
	//OS_Delay(250);
	OS_Task_Create(1,Task2);
  de:	60 e5       	ldi	r22, 0x50	; 80
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_OS_Task_Create>
	//OS_Delay(250);
	OS_Task_Create(2,Task3);
  e8:	6d e5       	ldi	r22, 0x5D	; 93
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_OS_Task_Create>
	OS_Task_Delete(this_task);
  f2:	0e 94 26 02 	call	0x44c	; 0x44c <__OS_DI_INT>
  f6:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_OS_CurTask>
  fa:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_OS_CurTask+0x1>
  fe:	80 81       	ld	r24, Z
 100:	8f 7b       	andi	r24, 0xBF	; 191
 102:	80 83       	st	Z, r24
 104:	0e 94 2b 02 	call	0x456	; 0x456 <__OS_RI_INT>
 108:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <_OS_CurTask>
 10c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 110:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <_OS_CurTask>
 114:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 118:	28 17       	cp	r18, r24
 11a:	39 07       	cpc	r19, r25
 11c:	59 f4       	brne	.+22     	; 0x134 <Task_Init+0x60>
 11e:	0e 94 26 02 	call	0x44c	; 0x44c <__OS_DI_INT>
 122:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_OS_State>
 12c:	0e 94 2b 02 	call	0x456	; 0x456 <__OS_RI_INT>
 130:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_OS_ReturnNoSave>
 134:	08 95       	ret

00000136 <InitT0>:

uint8_t var = 0x00;

void InitT0(void)
{
	TCCR0 = (1<<CS00)|(1<<CS01);
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 13a:	12 be       	out	0x32, r1	; 50
	OCR0 = 0x00;
 13c:	1c be       	out	0x3c, r1	; 60
	TIMSK = (1<<TOV0);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	89 bf       	out	0x39, r24	; 57
 142:	08 95       	ret

00000144 <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	OS_Timer();
 166:	0e 94 9d 02 	call	0x53a	; 0x53a <OS_Timer>
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <main>:
	OS_Task_Create(2,Task3);
	OS_Task_Delete(this_task);
}

int main (void)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
	OS_Init();
 194:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <OS_Init>
	InitT0();
 198:	0e 94 9b 00 	call	0x136	; 0x136 <InitT0>
	sei();
 19c:	78 94       	sei
	OS_Task_Create(0,Task_Init);
 19e:	6a e6       	ldi	r22, 0x6A	; 106
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_OS_Task_Create>
	OS_Run();
 1a8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 1ac:	8f 7e       	andi	r24, 0xEF	; 239
 1ae:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <_OS_Flags>
 1b2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <_OS_Flags>
 1bc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_OS_Best_Priority>
 1c0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <_OS_Worst_Priority>
 1c4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 1c8:	82 fd       	sbrc	r24, 2
 1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <main+0x56>
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <_OS_n>
 1d2:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <_OS_n>
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	e7 59       	subi	r30, 0x97	; 151
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	80 81       	ld	r24, Z
 1de:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <_OS_Cur_Pos>
 1e2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <_OS_Cur_Pos>
 1e6:	2c e0       	ldi	r18, 0x0C	; 12
 1e8:	82 9f       	mul	r24, r18
 1ea:	c0 01       	movw	r24, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	81 59       	subi	r24, 0x91	; 145
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <_OS_CurTask+0x1>
 1f6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_OS_CurTask>
 1fa:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_OS_CurTask>
 1fe:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 202:	80 81       	ld	r24, Z
 204:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_OS_State>
 208:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 20c:	86 ff       	sbrs	r24, 6
 20e:	8e c0       	rjmp	.+284    	; 0x32c <main+0x1a0>
 210:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 214:	88 23       	and	r24, r24
 216:	0c f4       	brge	.+2      	; 0x21a <main+0x8e>
 218:	89 c0       	rjmp	.+274    	; 0x32c <main+0x1a0>
 21a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 21e:	83 fd       	sbrc	r24, 3
 220:	43 c0       	rjmp	.+134    	; 0x2a8 <main+0x11c>
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_OS_JumpToTask>
 22a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_OS_SET_FSR_CUR_TASK>
 22e:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <_OS_State>
 232:	68 72       	andi	r22, 0x28	; 40
 234:	8f b7       	in	r24, 0x3f	; 63
 236:	f8 94       	cli
 238:	7c 91       	ld	r23, X
 23a:	77 7d       	andi	r23, 0xD7	; 215
 23c:	76 2b       	or	r23, r22
 23e:	7c 93       	st	X, r23
 240:	8f bf       	out	0x3f, r24	; 63
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 24a:	83 fd       	sbrc	r24, 3
 24c:	2d c0       	rjmp	.+90     	; 0x2a8 <main+0x11c>
 24e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 252:	83 fd       	sbrc	r24, 3
 254:	05 c0       	rjmp	.+10     	; 0x260 <main+0xd4>
 256:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 25a:	88 23       	and	r24, r24
 25c:	0c f0       	brlt	.+2      	; 0x260 <main+0xd4>
 25e:	a4 cf       	rjmp	.-184    	; 0x1a8 <main+0x1c>
 260:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <_OS_Cur_Pos>
 264:	e4 2f       	mov	r30, r20
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ef 55       	subi	r30, 0x5F	; 95
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	80 81       	ld	r24, Z
 26e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_OS_Worst_Priority>
 272:	89 1b       	sub	r24, r25
 274:	80 83       	st	Z, r24
 276:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_OS_Best_n>
 27a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <_OS_n>
 27e:	0d c0       	rjmp	.+26     	; 0x29a <main+0x10e>
 280:	28 2f       	mov	r18, r24
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	e7 59       	subi	r30, 0x97	; 151
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	90 81       	ld	r25, Z
 28c:	f9 01       	movw	r30, r18
 28e:	e6 59       	subi	r30, 0x96	; 150
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	90 83       	st	Z, r25
 294:	81 50       	subi	r24, 0x01	; 1
 296:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <_OS_n>
 29a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <_OS_n>
 29e:	81 11       	cpse	r24, r1
 2a0:	ef cf       	rjmp	.-34     	; 0x280 <main+0xf4>
 2a2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <_OS_TaskQueue>
 2a6:	80 cf       	rjmp	.-256    	; 0x1a8 <main+0x1c>
 2a8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 2ac:	84 ff       	sbrs	r24, 4
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <main+0x12c>
 2b0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 2b4:	85 ff       	sbrs	r24, 5
 2b6:	3a c0       	rjmp	.+116    	; 0x32c <main+0x1a0>
 2b8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 2bc:	83 ff       	sbrs	r24, 3
 2be:	36 c0       	rjmp	.+108    	; 0x32c <main+0x1a0>
 2c0:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <_OS_Cur_Pos>
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	f9 01       	movw	r30, r18
 2c8:	ef 55       	subi	r30, 0x5F	; 95
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	80 81       	ld	r24, Z
 2ce:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_OS_Temp>
 2d2:	88 23       	and	r24, r24
 2d4:	84 f0       	brlt	.+32     	; 0x2f6 <main+0x16a>
 2d6:	88 5f       	subi	r24, 0xF8	; 248
 2d8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_OS_Temp>
 2dc:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_OS_CurTask>
 2e0:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 2e4:	90 81       	ld	r25, Z
 2e6:	97 70       	andi	r25, 0x07	; 7
 2e8:	89 1b       	sub	r24, r25
 2ea:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_OS_Temp>
 2ee:	f9 01       	movw	r30, r18
 2f0:	ef 55       	subi	r30, 0x5F	; 95
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	80 83       	st	Z, r24
 2f6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_OS_Temp>
 2fa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_OS_Best_Priority>
 2fe:	98 17       	cp	r25, r24
 300:	78 f4       	brcc	.+30     	; 0x320 <main+0x194>
 302:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <_OS_Worst_Priority>
 306:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <_OS_Best_Priority>
 30a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <_OS_n>
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_OS_Best_n>
 314:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 318:	80 61       	ori	r24, 0x10	; 16
 31a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <_OS_Flags>
 31e:	06 c0       	rjmp	.+12     	; 0x32c <main+0x1a0>
 320:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_OS_Worst_Priority>
 324:	98 17       	cp	r25, r24
 326:	10 f4       	brcc	.+4      	; 0x32c <main+0x1a0>
 328:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <_OS_Worst_Priority>
 32c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 330:	82 fd       	sbrc	r24, 2
 332:	07 c0       	rjmp	.+14     	; 0x342 <main+0x1b6>
 334:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <_OS_n>
 338:	81 50       	subi	r24, 0x01	; 1
 33a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <_OS_n>
 33e:	81 11       	cpse	r24, r1
 340:	48 cf       	rjmp	.-368    	; 0x1d2 <main+0x46>
 342:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 346:	84 ff       	sbrs	r24, 4
 348:	2f cf       	rjmp	.-418    	; 0x1a8 <main+0x1c>
 34a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 34e:	87 7f       	andi	r24, 0xF7	; 247
 350:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <_OS_Flags>
 354:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 358:	8f 77       	andi	r24, 0x7F	; 127
 35a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <_OS_Flags>
 35e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <_OS_Best_n>
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	e6 59       	subi	r30, 0x96	; 150
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	80 81       	ld	r24, Z
 36a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <_OS_Cur_Pos>
 36e:	2c e0       	ldi	r18, 0x0C	; 12
 370:	82 9f       	mul	r24, r18
 372:	c0 01       	movw	r24, r0
 374:	11 24       	eor	r1, r1
 376:	81 59       	subi	r24, 0x91	; 145
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <_OS_CurTask+0x1>
 37e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_OS_CurTask>
 382:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_OS_CurTask>
 386:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 38a:	80 81       	ld	r24, Z
 38c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_OS_State>
 390:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 394:	86 ff       	sbrs	r24, 6
 396:	08 cf       	rjmp	.-496    	; 0x1a8 <main+0x1c>
 398:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 39c:	88 23       	and	r24, r24
 39e:	0c f4       	brge	.+2      	; 0x3a2 <main+0x216>
 3a0:	03 cf       	rjmp	.-506    	; 0x1a8 <main+0x1c>
 3a2:	3f cf       	rjmp	.-386    	; 0x222 <main+0x96>

000003a4 <_OS_SET_FSR_CUR_TASK>:
//------------------------------------------------------------------------------

    void OS_LeaveCriticalSection (void)
    {
        _OS_Flags.bInCriticalSection = 0;
        if (_OS_Flags.bGIE_CTemp) OS_RI(0x80);
 3a4:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <_OS_CurTask>
 3a8:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 3ac:	08 95       	ret

000003ae <_OS_JumpToTask>:
 3ae:	6d b7       	in	r22, 0x3d	; 61
 3b0:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <_OS_SP_Temp>
 3b4:	6e b7       	in	r22, 0x3e	; 62
 3b6:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <_OS_SP_Temp+0x1>
 3ba:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_OS_SET_FSR_CUR_TASK>
 3be:	6d 91       	ld	r22, X+
 3c0:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <_OS_State>
 3c4:	6d 91       	ld	r22, X+
 3c6:	7d 91       	ld	r23, X+
 3c8:	cd 91       	ld	r28, X+
 3ca:	dd 91       	ld	r29, X+
 3cc:	d7 ff       	sbrs	r29, 7
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <SKIP>
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62

000003d4 <SKIP>:
 3d4:	9f b7       	in	r25, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	9f bf       	out	0x3f, r25	; 63
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	6d 91       	ld	r22, X+
 3e4:	76 2f       	mov	r23, r22
 3e6:	66 23       	and	r22, r22
 3e8:	41 f0       	breq	.+16     	; 0x3fa <SKIP_RESTORE_TEMP>
 3ea:	89 91       	ld	r24, Y+

000003ec <REPEAT_RESTORE_TEMP>:
 3ec:	8d 91       	ld	r24, X+
 3ee:	89 93       	st	Y+, r24
 3f0:	7a 95       	dec	r23
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <REPEAT_RESTORE_TEMP>
 3f4:	63 95       	inc	r22
 3f6:	c6 1b       	sub	r28, r22
 3f8:	d1 09       	sbc	r29, r1

000003fa <SKIP_RESTORE_TEMP>:
 3fa:	08 95       	ret

000003fc <_OS_ReturnSave>:
 3fc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_OS_SET_FSR_CUR_TASK>
 400:	6d 91       	ld	r22, X+
 402:	6f 91       	pop	r22
 404:	7f 91       	pop	r23
 406:	7d 93       	st	X+, r23
 408:	6d 93       	st	X+, r22
 40a:	cd 93       	st	X+, r28
 40c:	dd 93       	st	X+, r29
 40e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 412:	88 60       	ori	r24, 0x08	; 8
 414:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_OS_State>
 418:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_OS_ReturnNoSave>

0000041c <_OS_ReturnNoSave>:
 41c:	1c 92       	st	X, r1
 41e:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <_OS_SP_Temp>
 422:	7c 1b       	sub	r23, r28
 424:	72 50       	subi	r23, 0x02	; 2
 426:	41 f0       	breq	.+16     	; 0x438 <SKIP_SAVE_TEMP>
 428:	75 30       	cpi	r23, 0x05	; 5
 42a:	30 f4       	brcc	.+12     	; 0x438 <SKIP_SAVE_TEMP>
 42c:	7d 93       	st	X+, r23
 42e:	69 91       	ld	r22, Y+

00000430 <REPEAT_SAVE_TEMP>:
 430:	69 91       	ld	r22, Y+
 432:	6d 93       	st	X+, r22
 434:	7a 95       	dec	r23
 436:	e1 f7       	brne	.-8      	; 0x430 <REPEAT_SAVE_TEMP>

00000438 <SKIP_SAVE_TEMP>:
 438:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <_OS_SP_Temp>
 43c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <_OS_SP_Temp+0x1>
 440:	8f b7       	in	r24, 0x3f	; 63
 442:	f8 94       	cli
 444:	6d bf       	out	0x3d, r22	; 61
 446:	7e bf       	out	0x3e, r23	; 62
 448:	8f bf       	out	0x3f, r24	; 63
 44a:	08 95       	ret

0000044c <__OS_DI_INT>:
 44c:	6f b7       	in	r22, 0x3f	; 63
 44e:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <_OS_Temp_I>
 452:	f8 94       	cli
 454:	08 95       	ret

00000456 <__OS_RI_INT>:
 456:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_OS_Temp_I>
 45a:	6f bf       	out	0x3f, r22	; 63
 45c:	08 95       	ret

0000045e <_OS_InitDelay>:
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
 464:	0e 94 26 02 	call	0x44c	; 0x44c <__OS_DI_INT>
 468:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 46c:	8f 7d       	andi	r24, 0xDF	; 223
 46e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_OS_State>
 472:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_OS_CurTask>
 476:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 47a:	80 81       	ld	r24, Z
 47c:	8f 7e       	andi	r24, 0xEF	; 239
 47e:	80 83       	st	Z, r24
 480:	0e 94 2b 02 	call	0x456	; 0x456 <__OS_RI_INT>
 484:	20 97       	sbiw	r28, 0x00	; 0
 486:	29 f1       	breq	.+74     	; 0x4d2 <_OS_InitDelay+0x74>
 488:	d1 95       	neg	r29
 48a:	c1 95       	neg	r28
 48c:	d1 09       	sbc	r29, r1
 48e:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_OS_CurTask>
 492:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 496:	d3 87       	std	Z+11, r29	; 0x0b
 498:	c2 87       	std	Z+10, r28	; 0x0a
 49a:	0e 94 26 02 	call	0x44c	; 0x44c <__OS_DI_INT>
 49e:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_OS_CurTask>
 4a2:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 4a6:	80 81       	ld	r24, Z
 4a8:	88 60       	ori	r24, 0x08	; 8
 4aa:	80 83       	st	Z, r24
 4ac:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_OS_CurTask>
 4b0:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 4b4:	80 81       	ld	r24, Z
 4b6:	80 61       	ori	r24, 0x10	; 16
 4b8:	80 83       	st	Z, r24
 4ba:	0e 94 2b 02 	call	0x456	; 0x456 <__OS_RI_INT>
 4be:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 4c2:	80 61       	ori	r24, 0x10	; 16
 4c4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_OS_State>
 4c8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_OS_State>
 4cc:	88 60       	ori	r24, 0x08	; 8
 4ce:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_OS_State>
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <OS_Init>:
 4d8:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <_OS_Flags>
 4dc:	ef e6       	ldi	r30, 0x6F	; 111
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	8f 7b       	andi	r24, 0xBF	; 191
 4e4:	80 83       	st	Z, r24
 4e6:	ab e7       	ldi	r26, 0x7B	; 123
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	8c 91       	ld	r24, X
 4ec:	8f 7b       	andi	r24, 0xBF	; 191
 4ee:	8c 93       	st	X, r24
 4f0:	a7 e8       	ldi	r26, 0x87	; 135
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	8c 91       	ld	r24, X
 4f6:	8f 7b       	andi	r24, 0xBF	; 191
 4f8:	8c 93       	st	X, r24
 4fa:	a3 e9       	ldi	r26, 0x93	; 147
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	8c 91       	ld	r24, X
 500:	8f 7b       	andi	r24, 0xBF	; 191
 502:	8c 93       	st	X, r24
 504:	f0 93 68 00 	sts	0x0068, r31	; 0x800068 <_OS_CurTask+0x1>
 508:	e0 93 67 00 	sts	0x0067, r30	; 0x800067 <_OS_CurTask>
 50c:	84 e0       	ldi	r24, 0x04	; 4
 50e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_OS_Temp>
 512:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_OS_Temp>
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	21 50       	subi	r18, 0x01	; 1
 51c:	31 09       	sbc	r19, r1
 51e:	81 50       	subi	r24, 0x01	; 1
 520:	f9 01       	movw	r30, r18
 522:	e6 59       	subi	r30, 0x96	; 150
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	80 83       	st	Z, r24
 528:	f9 01       	movw	r30, r18
 52a:	ef 55       	subi	r30, 0x5F	; 95
 52c:	ff 4f       	sbci	r31, 0xFF	; 255
 52e:	10 82       	st	Z, r1
 530:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_OS_Temp>
 534:	81 11       	cpse	r24, r1
 536:	ed cf       	rjmp	.-38     	; 0x512 <OS_Init+0x3a>
 538:	08 95       	ret

0000053a <OS_Timer>:
#ifdef OS_ENABLE_OS_TIMER
#ifndef OS_USE_INLINE_TIMER
//-----------------------------------------------------------------
void OS_Timer (void)
{
    __OS_TimerInline();
 53a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <_OS_Tasks>
 53e:	84 ff       	sbrs	r24, 4
 540:	0c c0       	rjmp	.+24     	; 0x55a <OS_Timer+0x20>
 542:	ef e6       	ldi	r30, 0x6F	; 111
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	82 85       	ldd	r24, Z+10	; 0x0a
 548:	93 85       	ldd	r25, Z+11	; 0x0b
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	93 87       	std	Z+11, r25	; 0x0b
 54e:	82 87       	std	Z+10, r24	; 0x0a
 550:	89 2b       	or	r24, r25
 552:	19 f4       	brne	.+6      	; 0x55a <OS_Timer+0x20>
 554:	80 81       	ld	r24, Z
 556:	8f 7e       	andi	r24, 0xEF	; 239
 558:	80 83       	st	Z, r24
 55a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <_OS_Tasks+0xc>
 55e:	84 ff       	sbrs	r24, 4
 560:	0e c0       	rjmp	.+28     	; 0x57e <OS_Timer+0x44>
 562:	ef e6       	ldi	r30, 0x6F	; 111
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	86 89       	ldd	r24, Z+22	; 0x16
 568:	97 89       	ldd	r25, Z+23	; 0x17
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	97 8b       	std	Z+23, r25	; 0x17
 56e:	86 8b       	std	Z+22, r24	; 0x16
 570:	89 2b       	or	r24, r25
 572:	29 f4       	brne	.+10     	; 0x57e <OS_Timer+0x44>
 574:	eb e7       	ldi	r30, 0x7B	; 123
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	8f 7e       	andi	r24, 0xEF	; 239
 57c:	80 83       	st	Z, r24
 57e:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <_OS_Tasks+0x18>
 582:	84 ff       	sbrs	r24, 4
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <OS_Timer+0x68>
 586:	ef e6       	ldi	r30, 0x6F	; 111
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	82 a1       	ldd	r24, Z+34	; 0x22
 58c:	93 a1       	ldd	r25, Z+35	; 0x23
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	93 a3       	std	Z+35, r25	; 0x23
 592:	82 a3       	std	Z+34, r24	; 0x22
 594:	89 2b       	or	r24, r25
 596:	29 f4       	brne	.+10     	; 0x5a2 <OS_Timer+0x68>
 598:	e7 e8       	ldi	r30, 0x87	; 135
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	8f 7e       	andi	r24, 0xEF	; 239
 5a0:	80 83       	st	Z, r24
 5a2:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <_OS_Tasks+0x24>
 5a6:	84 ff       	sbrs	r24, 4
 5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <OS_Timer+0x8c>
 5aa:	ef e6       	ldi	r30, 0x6F	; 111
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	86 a5       	ldd	r24, Z+46	; 0x2e
 5b0:	97 a5       	ldd	r25, Z+47	; 0x2f
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	97 a7       	std	Z+47, r25	; 0x2f
 5b6:	86 a7       	std	Z+46, r24	; 0x2e
 5b8:	89 2b       	or	r24, r25
 5ba:	29 f4       	brne	.+10     	; 0x5c6 <OS_Timer+0x8c>
 5bc:	e3 e9       	ldi	r30, 0x93	; 147
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	8f 7e       	andi	r24, 0xEF	; 239
 5c4:	80 83       	st	Z, r24
 5c6:	08 95       	ret

000005c8 <_OS_Task_Create>:
//------------------------------------------------------------------------------
#if !defined(_OS_Task_Create_DEFINED)
//------------------------------------------------------------------------------

    void _OS_Task_Create(OST_WORD priority, OST_CODE_POINTER TaskAddr)
    {
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	1f 92       	push	r1
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	89 83       	std	Y+1, r24	; 0x01
        OST_TASK_POINTER Task;

        _OS_Flags.bError = 0;
 5d4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 5d8:	8d 7f       	andi	r24, 0xFD	; 253
 5da:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <_OS_Flags>
         *  Start search from first task in     *
         *  OS_TASKS descriptors.               *
         *                                      *
         *--------------------------------------*/
        Task = (OST_TASK_POINTER)_OS_Tasks;
        _OS_Temp = 0;   
 5de:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_OS_Temp>
         *                                      *
         *  Start search from first task in     *
         *  OS_TASKS descriptors.               *
         *                                      *
         *--------------------------------------*/
        Task = (OST_TASK_POINTER)_OS_Tasks;
 5e2:	ef e6       	ldi	r30, 0x6F	; 111
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
        _OS_Temp = 0;   

        do {

            if (!Task->State.bEnable)               // Is descriptor free?
 5e6:	80 81       	ld	r24, Z
 5e8:	86 fd       	sbrc	r24, 6
 5ea:	1e c0       	rjmp	.+60     	; 0x628 <_OS_Task_Create+0x60>
            {                                       // Yes
                ((OST_TASK_STATE*)&priority)->bEnable = 1;
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
                ((OST_TASK_STATE*)&priority)->bReady = 1;
 5ee:	80 64       	ori	r24, 0x40	; 64
 5f0:	88 60       	ori	r24, 0x08	; 8
 5f2:	89 83       	std	Y+1, r24	; 0x01

                Task->pTaskPointer = TaskAddr;
 5f4:	72 83       	std	Z+2, r23	; 0x02
 5f6:	61 83       	std	Z+1, r22	; 0x01

                #ifdef OS_ENABLE_TTIMERS
                    Task->Timer = 0;
 5f8:	13 86       	std	Z+11, r1	; 0x0b
 5fa:	12 86       	std	Z+10, r1	; 0x0a

                #ifdef _OS_TASK_CREATE_PROC_SPEC
                _OS_TASK_CREATE_PROC_SPEC();
                #endif

                *((OS_TASKS_BANK char*)&Task->State) = priority;
 5fc:	80 83       	st	Z, r24

                #if defined(_OS_CUR_FLAGS_IN_OS_STATE)
                if (Task == _OS_CurTask) *((OS_RAM_NEAR char*)&_OS_State) = priority;
 5fe:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <_OS_CurTask>
 602:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <_OS_CurTask+0x1>
 606:	e8 17       	cp	r30, r24
 608:	f9 07       	cpc	r31, r25
 60a:	19 f4       	brne	.+6      	; 0x612 <_OS_Task_Create+0x4a>
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_OS_State>
                #endif

                #if defined(__OSA_AVR_WINAVR__) || defined(__OSA_AVR_IAR__)
                Task->nY_Temp = 0x8000;
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e8       	ldi	r25, 0x80	; 128
 616:	94 83       	std	Z+4, r25	; 0x04
 618:	83 83       	std	Z+3, r24	; 0x03
                #endif

                #if defined(__OSA_AVR_WINAVR__)
                Task->c_NumOfTemp = 0;  
 61a:	15 82       	std	Z+5, r1	; 0x05

                #if defined(__OSA_STM8__)
                Task->nSP_Temp = 0;
                #endif

                _OS_Flags.bError = 0;
 61c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 620:	8d 7f       	andi	r24, 0xFD	; 253
 622:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <_OS_Flags>

                return ;
 626:	0d c0       	rjmp	.+26     	; 0x642 <_OS_Task_Create+0x7a>

            }

            Task ++;
 628:	3c 96       	adiw	r30, 0x0c	; 12

        } while (++_OS_Temp < OS_TASKS);    
 62a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_OS_Temp>
 62e:	8f 5f       	subi	r24, 0xFF	; 255
 630:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_OS_Temp>
 634:	84 30       	cpi	r24, 0x04	; 4
 636:	b8 f2       	brcs	.-82     	; 0x5e6 <_OS_Task_Create+0x1e>

        // There is no free descriptor. Task was not created.
        _OS_Flags.bError = 1;
 638:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <_OS_Flags>
 63c:	82 60       	ori	r24, 0x02	; 2
 63e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <_OS_Flags>

        return ;
    }
 642:	0f 90       	pop	r0
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <_exit>:
 64a:	f8 94       	cli

0000064c <__stop_program>:
 64c:	ff cf       	rjmp	.-2      	; 0x64c <__stop_program>
